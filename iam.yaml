AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for IAM resources - Simplified for Cognito Access'

Parameters:
  Environment:
    Type: String
    Default: "dev"
    AllowedValues: 
      - "dev"
      - "staging"
      - "prod"
    Description: The environment this template is being deployed to

  UserPoolId:
    Type: String
    Description: ID of the Cognito User Pool
    Default: ""
    
  ServiceName:
    Type: String
    Description: Name for the central auth service
    Default: "AuthService"

Resources:
  CognitoAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ServiceName}-${Environment}-CognitoAccessRole'
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
          - Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Tags:
        - Key: Environment
          Value: !Ref Environment

  CognitoAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ServiceName}-${Environment}-CognitoPolicy'
      Roles:
        - !Ref CognitoAccessRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminInitiateAuth
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminSetUserPassword
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminUpdateUserAttributes
              - cognito-idp:AdminConfirmSignUp
              - cognito-idp:AdminRespondToAuthChallenge
              - cognito-idp:GetUser
              - cognito-idp:UpdateUserAttributes
              - cognito-idp:ChangePassword
              - cognito-idp:ForgotPassword
              - cognito-idp:ConfirmForgotPassword
              - cognito-idp:InitiateAuth
              - cognito-idp:RespondToAuthChallenge
            Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'

  ParameterStoreAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ServiceName}-${Environment}-ParameterStorePolicy'
      Roles:
        - !Ref CognitoAccessRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ServiceName}/${Environment}/*'
            
  SecretsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ServiceName}-${Environment}-SecretsManagerPolicy'
      Roles:
        - !Ref CognitoAccessRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${ServiceName}/${Environment}/*'

Outputs:
  CognitoAccessRoleArn:
    Description: ARN of the Cognito Access IAM Role
    Value: !GetAtt CognitoAccessRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CognitoAccessRoleArn'

  CognitoAccessRoleName:
    Description: Name of the Cognito Access IAM Role
    Value: !Ref CognitoAccessRole
    Export:
      Name: !Sub '${AWS::StackName}-CognitoAccessRoleName'